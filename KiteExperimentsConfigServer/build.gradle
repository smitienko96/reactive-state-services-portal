buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}
plugins{
	id "com.bmuschko.docker-spring-boot-application" version "4.0.5"
}

configurations {
	implementation{
		exclude module: "spring-boot-starter-logging"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.bmuschko.docker-spring-boot-application"
apply plugin: 'maven-publish'

def docker_registry_url = DOCKER_REGISTRY_URL
docker {
	registryCredentials {
//        url = 'https://gcr.io'
		url = "https://${docker_registry_url}"
//        username = '_json_key'
//        password = file(GCE_KEY_LOCATION).text
		username = DOCKER_USERNAME
		password = DOCKER_PASSWORD
	}
}


group = 'ru.lenobl.egov.kite'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/libs-milestone" }
}

ext['springCloudVersion'] = 'Greenwich.M1'

dependencies {
	implementation('org.springframework.cloud:spring-cloud-config-server')
	implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
	implementation("org.springframework.boot:spring-boot-starter-log4j2")
	implementation("org.apache.kafka:kafka-log4j-appender:1.0.0")
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
}
build.dependsOn publishToMavenLocal

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.tasks.Sync

def docker_application_name = "kite-experiments-config"
def docker_healthcheck_port = "\${CONFIG_SERVER_PORT}"
def project_id = GCE_PROJECT_ID

task createDockerfile(type: Dockerfile) {
	group 'build'
	destFile = project.file('build/docker/Dockerfile')
	from 'anapsix/alpine-java'
	label(['maintainer': 'Dmitry Steklyannikov "quanizator@gmail.com"'])
	copyFile jar.archiveName, "/app/${docker_application_name}.jar"
	workingDir "/app"
	runCommand 'apk --update --no-cache add curl'
	entryPoint 'java'
	defaultCommand '-jar', "/app/${docker_application_name}.jar"
//    instruction "HEALTHCHECK CMD curl -f http://localhost:${docker_healthcheck_port}/health || exit 1"
}

task buildImage(type: DockerBuildImage) {
	group 'build'
	dependsOn createDockerfile
	inputDir = createDockerfile.destFile.asFile.orNull.parentFile
	tags = ["${docker_registry_url}/${docker_application_name}:latest"]
}

task pushImage(type: DockerPushImage) {
	group 'build'
	dependsOn buildImage
	imageName = buildImage.tags.get()[0]
}

task syncJarAppArchive(type: Sync) {
	dependsOn assemble
	from jar.archivePath
	into createDockerfile.destFile.asFile.orNull.parentFile
}

createDockerfile.dependsOn syncJarAppArchive