buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE"
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.15.1"
        classpath "org.yaml:snakeyaml:1.23"
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
}

apply plugin: "com.commercehub.gradle.plugin.avro"

configurations {
    implementation {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: 'spring-boot-starter-logging'
        resolutionStrategy {
            dependencySubstitution {
                substitute(module('org.apache.kafka:kafka-streams:2.0.0'))
                        .with(module('org.apache.kafka:kafka-streams:2.0.1'))
            }
        }
    }
}


apply plugin: 'java'
apply plugin: 'java-library'

apply plugin: 'io.franzbecker.gradle-lombok'
lombok {
    version = '1.18.2'
    sha256 = ""
}

apply plugin: 'idea'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'

group = 'ru.lenobl.egov.kite'
version = '1.0'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/libs-milestone" }
    maven { url "http://packages.confluent.io/maven" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}


ext {
    springCloudVersion = 'Greenwich.M1'
    springCloudStreamVersion = 'Fishtown.RC2'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.apache.kafka:kafka-streams:2.0.1') {
       force = true
    }
    implementation('org.springframework.cloud:spring-cloud-stream')
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    api('org.springframework.cloud:spring-cloud-stream-schema')
    api("io.confluent:kafka-streams-avro-serde:5.0.1")
    api("io.confluent:kafka-avro-serializer:5.0.1")
    implementation("org.springframework.cloud:spring-cloud-starter-stream-kafka")
    implementation('org.springframework.cloud:spring-cloud-stream-binder-kafka-streams')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    
    implementation('org.springframework.boot:spring-boot-starter-web')
    
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("io.projectreactor:reactor-core")
    implementation("io.projectreactor.kafka:reactor-kafka")
    implementation("org.apache.kafka:kafka-log4j-appender:1.0.0")
    implementation("org.apache.avro:avro:1.8.2")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.9.7")
    
    implementation("com.google.code.gson:gson:2.8.5")
    implementation("org.apache.commons:commons-lang3:3.7")
    implementation("org.apache.commons:commons-collections4:4.0")
    
    implementation('javax.validation:validation-api:2.0.1.Final')
    implementation("org.hibernate:hibernate-validator:6.0.13.Final")
    implementation("org.mongodb:mongodb-driver-core:3.9.0")
    implementation("org.mongodb:mongodb-driver-async:3.9.0")
    implementation("org.mongodb:bson:3.9.0")
    implementation("org.mongodb:mongodb-driver-reactivestreams:1.10.0")
    implementation("org.jooq:jooq:3.11.5")
    implementation("org.jooq:jooq-codegen:3.11.5")

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.cloud:spring-cloud-stream-test-support')
}

bootJar {
    enabled = false
}
jar {
    enabled = true
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-stream-dependencies:${springCloudStreamVersion}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
build.dependsOn publishToMavenLocal