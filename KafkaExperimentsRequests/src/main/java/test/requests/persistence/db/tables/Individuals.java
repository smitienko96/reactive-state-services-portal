/*
 * This file is generated by jOOQ.
 */
package test.requests.persistence.db.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.requests.persistence.db.Applications;
import test.requests.persistence.db.Indexes;
import test.requests.persistence.db.Keys;
import test.requests.persistence.db.tables.records.IndividualsRecord;


/**
 * Заявители - физические лица
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Individuals extends TableImpl<IndividualsRecord> {

    private static final long serialVersionUID = -845711514;

    /**
     * The reference instance of <code>applications.individuals</code>
     */
    public static final Individuals INDIVIDUALS = new Individuals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndividualsRecord> getRecordType() {
        return IndividualsRecord.class;
    }

    /**
     * The column <code>applications.individuals.id</code>. ID заявителя
     */
    public final TableField<IndividualsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('applications.individuals_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "ID заявителя");

    /**
     * The column <code>applications.individuals.identifier</code>. Идентификатор заявителя
     */
    public final TableField<IndividualsRecord, String> IDENTIFIER = createField("identifier", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "Идентификатор заявителя");

    /**
     * The column <code>applications.individuals.last_name</code>. Фамилия заявителя
     */
    public final TableField<IndividualsRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "Фамилия заявителя");

    /**
     * The column <code>applications.individuals.first_name</code>. Имя заявителя
     */
    public final TableField<IndividualsRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "Имя заявителя");

    /**
     * The column <code>applications.individuals.patronymic</code>. Отчество заявителя
     */
    public final TableField<IndividualsRecord, String> PATRONYMIC = createField("patronymic", org.jooq.impl.SQLDataType.VARCHAR(100), this, "Отчество заявителя");

    /**
     * The column <code>applications.individuals.passport_no</code>. Номер паспорта
     */
    public final TableField<IndividualsRecord, String> PASSPORT_NO = createField("passport_no", org.jooq.impl.SQLDataType.VARCHAR(12), this, "Номер паспорта");

    /**
     * The column <code>applications.individuals.reg_date</code>. Дата регистрации заявителя
     */
    public final TableField<IndividualsRecord, Date> REG_DATE = createField("reg_date", org.jooq.impl.SQLDataType.DATE, this, "Дата регистрации заявителя");

    /**
     * The column <code>applications.individuals.living_address_id</code>. ID фактического адреса
     */
    public final TableField<IndividualsRecord, Long> LIVING_ADDRESS_ID = createField("living_address_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID фактического адреса");

    /**
     * The column <code>applications.individuals.registration_address_id</code>. ID адреса регистрации
     */
    public final TableField<IndividualsRecord, Long> REGISTRATION_ADDRESS_ID = createField("registration_address_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID адреса регистрации");

    /**
     * The column <code>applications.individuals.passport_series</code>. Серия паспорта
     */
    public final TableField<IndividualsRecord, String> PASSPORT_SERIES = createField("passport_series", org.jooq.impl.SQLDataType.VARCHAR(12), this, "Серия паспорта");

    /**
     * The column <code>applications.individuals.passport_issue_date</code>. Дата выдачи паспорта
     */
    public final TableField<IndividualsRecord, Date> PASSPORT_ISSUE_DATE = createField("passport_issue_date", org.jooq.impl.SQLDataType.DATE, this, "Дата выдачи паспорта");

    /**
     * The column <code>applications.individuals.passport_issue_authority</code>. Наименование органа, выдавшего паспорт
     */
    public final TableField<IndividualsRecord, String> PASSPORT_ISSUE_AUTHORITY = createField("passport_issue_authority", org.jooq.impl.SQLDataType.VARCHAR(50), this, "Наименование органа, выдавшего паспорт");

    /**
     * The column <code>applications.individuals.active</code>. Статус заявителя в системе (активен/неактивен)
     */
    public final TableField<IndividualsRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Статус заявителя в системе (активен/неактивен)");

    /**
     * Create a <code>applications.individuals</code> table reference
     */
    public Individuals() {
        this(DSL.name("individuals"), null);
    }

    /**
     * Create an aliased <code>applications.individuals</code> table reference
     */
    public Individuals(String alias) {
        this(DSL.name(alias), INDIVIDUALS);
    }

    /**
     * Create an aliased <code>applications.individuals</code> table reference
     */
    public Individuals(Name alias) {
        this(alias, INDIVIDUALS);
    }

    private Individuals(Name alias, Table<IndividualsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Individuals(Name alias, Table<IndividualsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Заявители - физические лица"));
    }

    public <O extends Record> Individuals(Table<O> child, ForeignKey<O, IndividualsRecord> key) {
        super(child, key, INDIVIDUALS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Applications.APPLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_INDIVIDUAL_IDENTIFIER, Indexes.INDIVIDUALS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndividualsRecord, Long> getIdentity() {
        return Keys.IDENTITY_INDIVIDUALS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndividualsRecord> getPrimaryKey() {
        return Keys.INDIVIDUALS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndividualsRecord>> getKeys() {
        return Arrays.<UniqueKey<IndividualsRecord>>asList(Keys.INDIVIDUALS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<IndividualsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IndividualsRecord, ?>>asList(Keys.INDIVIDUALS__FK_APPLICANT_ADDRESS_LIVING, Keys.INDIVIDUALS__FK_APPLICANT_ADDRESS_REGISTRATION);
    }

    public Addresses individuals_FkApplicantAddressLiving() {
        return new Addresses(this, Keys.INDIVIDUALS__FK_APPLICANT_ADDRESS_LIVING);
    }

    public Addresses individuals_FkApplicantAddressRegistration() {
        return new Addresses(this, Keys.INDIVIDUALS__FK_APPLICANT_ADDRESS_REGISTRATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Individuals as(String alias) {
        return new Individuals(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Individuals as(Name alias) {
        return new Individuals(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Individuals rename(String name) {
        return new Individuals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Individuals rename(Name name) {
        return new Individuals(name, null);
    }
}
