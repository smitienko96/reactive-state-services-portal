/*
 * This file is generated by jOOQ.
 */
package test.requests.persistence.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.requests.persistence.db.Indexes;
import test.requests.persistence.db.Keys;
import test.requests.persistence.db.tables.records.ApplicationsRecord;


/**
 * Заявления
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Applications extends TableImpl<ApplicationsRecord> {

    private static final long serialVersionUID = -1902376889;

    /**
     * The reference instance of <code>applications.applications</code>
     */
    public static final Applications APPLICATIONS_ = new Applications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationsRecord> getRecordType() {
        return ApplicationsRecord.class;
    }

    /**
     * The column <code>applications.applications.id</code>. ID заявления
     */
    public final TableField<ApplicationsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('applications.applications_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "ID заявления");

    /**
     * The column <code>applications.applications.number</code>. Номер заявления
     */
    public final TableField<ApplicationsRecord, String> NUMBER = createField("number", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "Номер заявления");

    /**
     * The column <code>applications.applications.status</code>. Статус заявления
     */
    public final TableField<ApplicationsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "Статус заявления");

    /**
     * The column <code>applications.applications.applicant_id</code>. ID заявителя
     */
    public final TableField<ApplicationsRecord, Long> APPLICANT_ID = createField("applicant_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID заявителя");

    /**
     * The column <code>applications.applications.application_type</code>. Тип заявления
     */
    public final TableField<ApplicationsRecord, String> APPLICATION_TYPE = createField("application_type", org.jooq.impl.SQLDataType.VARCHAR(10), this, "Тип заявления");

    /**
     * The column <code>applications.applications.created</code>. Дата и время создания
     */
    public final TableField<ApplicationsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "Дата и время создания");

    /**
     * The column <code>applications.applications.changed</code>. Дата и время последней модификации
     */
    public final TableField<ApplicationsRecord, Timestamp> CHANGED = createField("changed", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "Дата и время последней модификации");

    /**
     * The column <code>applications.applications.creator_id</code>. ID оператора, зарегистрировавшего заявление
     */
    public final TableField<ApplicationsRecord, String> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "ID оператора, зарегистрировавшего заявление");

    /**
     * The column <code>applications.applications.updater_id</code>. ID оператора, изменивашего заявление последним
     */
    public final TableField<ApplicationsRecord, String> UPDATER_ID = createField("updater_id", org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "ID оператора, изменивашего заявление последним");

    /**
     * Create a <code>applications.applications</code> table reference
     */
    public Applications() {
        this(DSL.name("applications"), null);
    }

    /**
     * Create an aliased <code>applications.applications</code> table reference
     */
    public Applications(String alias) {
        this(DSL.name(alias), APPLICATIONS_);
    }

    /**
     * Create an aliased <code>applications.applications</code> table reference
     */
    public Applications(Name alias) {
        this(alias, APPLICATIONS_);
    }

    private Applications(Name alias, Table<ApplicationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Applications(Name alias, Table<ApplicationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Заявления"));
    }

    public <O extends Record> Applications(Table<O> child, ForeignKey<O, ApplicationsRecord> key) {
        super(child, key, APPLICATIONS_);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return test.requests.persistence.db.Applications.APPLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPLICATIONS_NUMBER_KEY, Indexes.APPLICATIONS_PKEY, Indexes.IDX_APPLICATION_NUMBER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ApplicationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_APPLICATIONS_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApplicationsRecord> getPrimaryKey() {
        return Keys.APPLICATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApplicationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicationsRecord>>asList(Keys.APPLICATIONS_PKEY, Keys.APPLICATIONS_NUMBER_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ApplicationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ApplicationsRecord, ?>>asList(Keys.APPLICATIONS__FK_APPLICATIONS_INDIVIDUALS, Keys.APPLICATIONS__FK_APPLICATIONS_ORGANIZATIONS);
    }

    public Individuals individuals() {
        return new Individuals(this, Keys.APPLICATIONS__FK_APPLICATIONS_INDIVIDUALS);
    }

    public Organizations organizations() {
        return new Organizations(this, Keys.APPLICATIONS__FK_APPLICATIONS_ORGANIZATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applications as(String alias) {
        return new Applications(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applications as(Name alias) {
        return new Applications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Applications rename(String name) {
        return new Applications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Applications rename(Name name) {
        return new Applications(name, null);
    }
}
