/*
 * This file is generated by jOOQ.
 */
package test.requests.persistence.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.requests.persistence.db.Applications;
import test.requests.persistence.db.Indexes;
import test.requests.persistence.db.Keys;
import test.requests.persistence.db.tables.records.AddressesRecord;


/**
 * Адреса заявителей
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Addresses extends TableImpl<AddressesRecord> {

    private static final long serialVersionUID = -1957468056;

    /**
     * The reference instance of <code>applications.addresses</code>
     */
    public static final Addresses ADDRESSES = new Addresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressesRecord> getRecordType() {
        return AddressesRecord.class;
    }

    /**
     * The column <code>applications.addresses.id</code>. ID адреса заявителя
     */
    public final TableField<AddressesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('applications.addresses_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "ID адреса заявителя");

    /**
     * The column <code>applications.addresses.region</code>. Регион
     */
    public final TableField<AddressesRecord, String> REGION = createField("region", org.jooq.impl.SQLDataType.VARCHAR(25), this, "Регион");

    /**
     * The column <code>applications.addresses.city</code>. Город
     */
    public final TableField<AddressesRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(25), this, "Город");

    /**
     * The column <code>applications.addresses.street</code>. Улица
     */
    public final TableField<AddressesRecord, String> STREET = createField("street", org.jooq.impl.SQLDataType.VARCHAR(25), this, "Улица");

    /**
     * The column <code>applications.addresses.building</code>. Дом
     */
    public final TableField<AddressesRecord, String> BUILDING = createField("building", org.jooq.impl.SQLDataType.VARCHAR(5), this, "Дом");

    /**
     * The column <code>applications.addresses.apartment</code>. Квартира/Помещение
     */
    public final TableField<AddressesRecord, String> APARTMENT = createField("apartment", org.jooq.impl.SQLDataType.VARCHAR(5), this, "Квартира/Помещение");

    /**
     * Create a <code>applications.addresses</code> table reference
     */
    public Addresses() {
        this(DSL.name("addresses"), null);
    }

    /**
     * Create an aliased <code>applications.addresses</code> table reference
     */
    public Addresses(String alias) {
        this(DSL.name(alias), ADDRESSES);
    }

    /**
     * Create an aliased <code>applications.addresses</code> table reference
     */
    public Addresses(Name alias) {
        this(alias, ADDRESSES);
    }

    private Addresses(Name alias, Table<AddressesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Addresses(Name alias, Table<AddressesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Адреса заявителей"));
    }

    public <O extends Record> Addresses(Table<O> child, ForeignKey<O, AddressesRecord> key) {
        super(child, key, ADDRESSES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Applications.APPLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADDRESSES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AddressesRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADDRESSES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressesRecord> getPrimaryKey() {
        return Keys.ADDRESSES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressesRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressesRecord>>asList(Keys.ADDRESSES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Addresses as(String alias) {
        return new Addresses(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Addresses as(Name alias) {
        return new Addresses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresses rename(String name) {
        return new Addresses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresses rename(Name name) {
        return new Addresses(name, null);
    }
}
