/*
 * This file is generated by jOOQ.
 */
package test.requests.persistence.db.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.requests.persistence.db.Applications;
import test.requests.persistence.db.Indexes;
import test.requests.persistence.db.Keys;
import test.requests.persistence.db.tables.records.OrganizationsRecord;


/**
 * Заявители - юридические лица
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organizations extends TableImpl<OrganizationsRecord> {

    private static final long serialVersionUID = -1410071341;

    /**
     * The reference instance of <code>applications.organizations</code>
     */
    public static final Organizations ORGANIZATIONS = new Organizations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationsRecord> getRecordType() {
        return OrganizationsRecord.class;
    }

    /**
     * The column <code>applications.organizations.id</code>. ID заявителя
     */
    public final TableField<OrganizationsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('applications.organizations_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "ID заявителя");

    /**
     * The column <code>applications.organizations.identifier</code>. Идентификатор заявителя
     */
    public final TableField<OrganizationsRecord, String> IDENTIFIER = createField("identifier", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "Идентификатор заявителя");

    /**
     * The column <code>applications.organizations.org_name_short</code>. Краткое наименование заявителя
     */
    public final TableField<OrganizationsRecord, String> ORG_NAME_SHORT = createField("org_name_short", org.jooq.impl.SQLDataType.VARCHAR(150), this, "Краткое наименование заявителя");

    /**
     * The column <code>applications.organizations.org_name_full</code>. Полное наименование заявителя
     */
    public final TableField<OrganizationsRecord, String> ORG_NAME_FULL = createField("org_name_full", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Полное наименование заявителя");

    /**
     * The column <code>applications.organizations.inn</code>. ИНН заявителя
     */
    public final TableField<OrganizationsRecord, String> INN = createField("inn", org.jooq.impl.SQLDataType.VARCHAR(20), this, "ИНН заявителя");

    /**
     * The column <code>applications.organizations.ogrn</code>. ОГРН заявителя
     */
    public final TableField<OrganizationsRecord, String> OGRN = createField("ogrn", org.jooq.impl.SQLDataType.VARCHAR(20), this, "ОГРН заявителя");

    /**
     * The column <code>applications.organizations.reg_date</code>. Дата регистрации заявителя
     */
    public final TableField<OrganizationsRecord, Date> REG_DATE = createField("reg_date", org.jooq.impl.SQLDataType.DATE, this, "Дата регистрации заявителя");

    /**
     * The column <code>applications.organizations.actual_address_id</code>. ID фактического адреса
     */
    public final TableField<OrganizationsRecord, Long> ACTUAL_ADDRESS_ID = createField("actual_address_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID фактического адреса");

    /**
     * The column <code>applications.organizations.legal_address_id</code>. ID юридического адреса
     */
    public final TableField<OrganizationsRecord, Long> LEGAL_ADDRESS_ID = createField("legal_address_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID юридического адреса");

    /**
     * Create a <code>applications.organizations</code> table reference
     */
    public Organizations() {
        this(DSL.name("organizations"), null);
    }

    /**
     * Create an aliased <code>applications.organizations</code> table reference
     */
    public Organizations(String alias) {
        this(DSL.name(alias), ORGANIZATIONS);
    }

    /**
     * Create an aliased <code>applications.organizations</code> table reference
     */
    public Organizations(Name alias) {
        this(alias, ORGANIZATIONS);
    }

    private Organizations(Name alias, Table<OrganizationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Organizations(Name alias, Table<OrganizationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Заявители - юридические лица"));
    }

    public <O extends Record> Organizations(Table<O> child, ForeignKey<O, OrganizationsRecord> key) {
        super(child, key, ORGANIZATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Applications.APPLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_ORGANIZATION_IDENTIFIER, Indexes.ORGANIZATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrganizationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_ORGANIZATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrganizationsRecord> getPrimaryKey() {
        return Keys.ORGANIZATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrganizationsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganizationsRecord>>asList(Keys.ORGANIZATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Organizations as(String alias) {
        return new Organizations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Organizations as(Name alias) {
        return new Organizations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organizations rename(String name) {
        return new Organizations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organizations rename(Name name) {
        return new Organizations(name, null);
    }
}
