/*
 * This file is generated by jOOQ.
 */
package test.requests.persistence.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.requests.persistence.db.Applications;
import test.requests.persistence.db.Indexes;
import test.requests.persistence.db.Keys;
import test.requests.persistence.db.tables.records.ApplicationDocumentFieldsRecord;


/**
 * Поля документов заявления
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicationDocumentFields extends TableImpl<ApplicationDocumentFieldsRecord> {

    private static final long serialVersionUID = -164336946;

    /**
     * The reference instance of <code>applications.application_document_fields</code>
     */
    public static final ApplicationDocumentFields APPLICATION_DOCUMENT_FIELDS = new ApplicationDocumentFields();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationDocumentFieldsRecord> getRecordType() {
        return ApplicationDocumentFieldsRecord.class;
    }

    /**
     * The column <code>applications.application_document_fields.id</code>. ID поля документов
     */
    public final TableField<ApplicationDocumentFieldsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('applications.application_document_fields_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "ID поля документов");

    /**
     * The column <code>applications.application_document_fields.section_id</code>. ID секции заявления
     */
    public final TableField<ApplicationDocumentFieldsRecord, Long> SECTION_ID = createField("section_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID секции заявления");

    /**
     * The column <code>applications.application_document_fields.name</code>. Название поля документа
     */
    public final TableField<ApplicationDocumentFieldsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "Название поля документа");

    /**
     * The column <code>applications.application_document_fields.description</code>. Описание поля документа
     */
    public final TableField<ApplicationDocumentFieldsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Описание поля документа");

    /**
     * The column <code>applications.application_document_fields.field_type</code>. Тип поля документа
     */
    public final TableField<ApplicationDocumentFieldsRecord, String> FIELD_TYPE = createField("field_type", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "Тип поля документа");

    /**
     * The column <code>applications.application_document_fields.field_options</code>. Возможные значения полей документа
     */
    public final TableField<ApplicationDocumentFieldsRecord, String> FIELD_OPTIONS = createField("field_options", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Возможные значения полей документа");

    /**
     * The column <code>applications.application_document_fields.value</code>. Значение поля документа
     */
    public final TableField<ApplicationDocumentFieldsRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Значение поля документа");

    /**
     * Create a <code>applications.application_document_fields</code> table reference
     */
    public ApplicationDocumentFields() {
        this(DSL.name("application_document_fields"), null);
    }

    /**
     * Create an aliased <code>applications.application_document_fields</code> table reference
     */
    public ApplicationDocumentFields(String alias) {
        this(DSL.name(alias), APPLICATION_DOCUMENT_FIELDS);
    }

    /**
     * Create an aliased <code>applications.application_document_fields</code> table reference
     */
    public ApplicationDocumentFields(Name alias) {
        this(alias, APPLICATION_DOCUMENT_FIELDS);
    }

    private ApplicationDocumentFields(Name alias, Table<ApplicationDocumentFieldsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApplicationDocumentFields(Name alias, Table<ApplicationDocumentFieldsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Поля документов заявления"));
    }

    public <O extends Record> ApplicationDocumentFields(Table<O> child, ForeignKey<O, ApplicationDocumentFieldsRecord> key) {
        super(child, key, APPLICATION_DOCUMENT_FIELDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Applications.APPLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPLICATION_DOCUMENT_FIELDS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ApplicationDocumentFieldsRecord, Long> getIdentity() {
        return Keys.IDENTITY_APPLICATION_DOCUMENT_FIELDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApplicationDocumentFieldsRecord> getPrimaryKey() {
        return Keys.APPLICATION_DOCUMENT_FIELDS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApplicationDocumentFieldsRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicationDocumentFieldsRecord>>asList(Keys.APPLICATION_DOCUMENT_FIELDS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ApplicationDocumentFieldsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ApplicationDocumentFieldsRecord, ?>>asList(Keys.APPLICATION_DOCUMENT_FIELDS__FK_SECTIONS_DOCUMENT_FIELDS);
    }

    public ApplicationSections applicationSections() {
        return new ApplicationSections(this, Keys.APPLICATION_DOCUMENT_FIELDS__FK_SECTIONS_DOCUMENT_FIELDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApplicationDocumentFields as(String alias) {
        return new ApplicationDocumentFields(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApplicationDocumentFields as(Name alias) {
        return new ApplicationDocumentFields(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationDocumentFields rename(String name) {
        return new ApplicationDocumentFields(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationDocumentFields rename(Name name) {
        return new ApplicationDocumentFields(name, null);
    }
}
